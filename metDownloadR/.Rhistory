timeBgn
Sys.time()
as.character(Sys.time())
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
mesoId=useTheseMeta$id
timeBgn<-gsub("-|:| ","",start_date)
timeEnd<-gsub("-|:| ","",end_date)
out<-get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId=mesoId,
timeBgn=timeBgn,timeEnd=timeEnd)
data.list
timeEnd
timeBgn
tail(timeEnd,n=2)
substr(timeEnd,nchar(timeEnd)-2,nchar(timeEnd))
substr(timeEnd,nchar(timeEnd)-1,nchar(timeEnd))
timeEnd<-substr(timeEnd,1,nchar(timeEnd)-1)
timeEnd
timeEnd<-"20190205162413"
timeEnd<-substr(timeEnd,1,nchar(timeEnd)-2)
timeEnd
timeEnd<-paste0(timeEnd,"00")
timeEnd
library(httr)
library(jsonlite)
callText<-paste0("https://api.synopticdata.com/v2/stations/timeseries?&token=",token,"&start=",timeBgn,"&end=",timeEnd,"&obtimezone=utc&output=json&stid=",mesoId)
data.call<-GET(callText)
data.raw<-rawToChar(data.call$content)
data.list <- fromJSON(data.raw)
data.raw
data.list
timeEnd<-substr(timeEnd,1,nchar(timeEnd)-2)
library(httr)
library(jsonlite)
callText<-paste0("https://api.synopticdata.com/v2/stations/timeseries?&token=",token,"&start=",timeBgn,"&end=",timeEnd,"&obtimezone=utc&output=json&stid=",mesoId)
data.call<-GET(callText)
data.raw<-rawToChar(data.call$content)
data.list <- fromJSON(data.raw)
data.list
timeBgn<-substr(timeBgn,1,nchar(timeBgn)-2)
library(httr)
library(jsonlite)
callText<-paste0("https://api.synopticdata.com/v2/stations/timeseries?&token=",token,"&start=",timeBgn,"&end=",timeEnd,"&obtimezone=utc&output=json&stid=",mesoId)
data.call<-GET(callText)
data.raw<-rawToChar(data.call$content)
data.list <- fromJSON(data.raw)
keepThese<-which(sapply(data.list$STATION[[1]]$OBSERVATIONS, function(x) class(x))!="list")
data.df <- data.frame(do.call(cbind,lapply(data.list$STATION[[1]]$OBSERVATIONS[keepThese], as.data.frame)))
data.list$STATION[[1]]$OBSERVATIONS
sapply(data.list$STATION[[1]]$OBSERVATIONS, function(x) class(x))
data.list$STATION[[1]]$OBSERVATIONS$solar_radiation_set_1
data.list$STATION[[1]]$OBSERVATIONS$dew_point_temperature_set_1d
data.list$STATION[[1]]$OBSERVATIONS$solar_radiation_set_1
unlist(data.list$STATION[[1]]$OBSERVATIONS$solar_radiation_set_1)
needUnlist<-which(sapply(data.list$STATION[[1]]$OBSERVATIONS, function(x) class(x))!="list")
needUnlist<-which(sapply(data.list$STATION[[1]]$OBSERVATIONS, function(x) class(x))=="list")
needUnlist
data.list$STATION[[1]]$SENSOR_VARIABLES
class(data.list$STATION[[1]]$OBSERVATIONS[i])=="list"
i
sapply(data.list$STATION[[1]]$OBSERVATIONS, function(x) class(x))
class(data.list$STATION[[1]]$OBSERVATIONS[i])
unlist(data.list$STATION[[1]]$OBSERVATIONS[i])
unlist(data.list$STATION[[1]]$OBSERVATIONS[[i]])
data.df <- data.frame(do.call(cbind,lapply(data.list$STATION[[1]]$OBSERVATIONS, unlist(as.data.frame))))
data.df <- data.frame(do.call(cbind,lapply(data.list$STATION[[1]]$OBSERVATIONS, as.data.frame)))
class(data.list$STATION[[1]]$OBSERVATIONS[[i]])=="list"
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
mesoId=useTheseMeta$id
timeBgn<-gsub("-|:| ","",start_date)
timeEnd<-gsub("-|:| ","",end_date)
out<-get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId=mesoId,
timeBgn=timeBgn,timeEnd=timeEnd)
data.df <- data.frame(do.call(cbind,lapply(data.list$STATION[[1]]$OBSERVATIONS, as.data.frame)))
library(metDownloadR)
news("metScanR")
news(metScanR)
?news
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
#sort by ID:
#saveRDS(NEONsites,"C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-readRDS("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-NEONsites[with(NEONsites,order(Site.ID)),]
sites<-NEONsites$Site.ID
#startSite<-grep("YELL",sites)
#useSites<-sites[startSite:length(sites)]
#open directory to see what I've already run, and then run for sites that haven't been run yet:
temp<-list.files("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/")
#filter temp by variable:
temp<-temp[grep("wind",temp)]
#sites that have already run:
alreadyRun<-gsub("\\_.*","",temp)
runThese<-sites[which(sites %in% alreadyRun ==F)]
i=1
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
mesoId=useTheseMeta$id
timeBgn<-gsub("-|:| ","",start_date)
timeEnd<-gsub("-|:| ","",end_date)
out<-get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId=mesoId,
timeBgn=timeBgn,timeEnd=timeEnd)
nchar(timeBgn)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time)
tail(data.list$STATION[[1]]$OBSERVATIONS$date_time)
tail(data.list$STATION[[1]]$OBSERVATIONS$solar_radiation_set_1)
length(data.list$STATION[[1]]$OBSERVATIONS$solar_radiation_set_1)
length(data.list$STATION[[1]]$OBSERVATIONS$date_time)
length(data.list$STATION[[1]]$OBSERVATIONS$wind_cardinal_direction_set_1d)
length(data.list$STATION[[1]]$OBSERVATIONS$wind_gust_set_1)
lapply(data.list$STATION[[1]]$OBSERVATIONS, function(x) length(x))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS$date_time))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS$solar_radiation_set_1))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[1]))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[2]))
plot(names(data.list$STATION[[1]]$OBSERVATIONS[2]))
plot(as.numeric(names(data.list$STATION[[1]]$OBSERVATIONS[2])))
head(as.numeric(names(data.list$STATION[[1]]$OBSERVATIONS[2])))
head(names(data.list$STATION[[1]]$OBSERVATIONS[2]))
head(names(data.list$STATION[[1]]$OBSERVATIONS[[2]]))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[2]))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[[2]]))
unlist(data.list$STATION[[1]]$OBSERVATIONS[2])
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2]))
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:1000])
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:10000])
names(data.list$STATION[[1]]$OBSERVATIONS)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time,n1==)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time,n1=00)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time,n=100)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time,n=500)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time,n=600)
head(data.list$STATION[[1]]$OBSERVATIONS$date_time,n=100)
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:100])
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:1000])
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:500])
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:300])
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:300],type="l")
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:500],type="l")
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:5000],type="l")
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:10000],type="l")
plot(unlist(data.list$STATION[[1]]$OBSERVATIONS[2])[1:13000],type="l")
unlist(data.list$STATION[[1]]$OBSERVATIONS[2])
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[[2]]))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[[1]]))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[1]))
length(unlist(data.list$STATION[[1]]$OBSERVATIONS[2]))
length((data.list$STATION[[1]]$OBSERVATIONS[2]))
length((data.list$STATION[[1]]$OBSERVATIONS[[2]]))
lapply(data.list$STATION[[1]]$OBSERVATIONS[[2]], function(x) is.null(x))
unlist(lapply(data.list$STATION[[1]]$OBSERVATIONS[[2]], function(x) is.null(x)))
which(unlist(lapply(data.list$STATION[[1]]$OBSERVATIONS[[2]], function(x) is.null(x)))==T)
i=1
i=1
nullEntries<-which(unlist(lapply(data.list$STATION[[1]]$OBSERVATIONS[[i]], function(x) is.null(x)))==T)
nullEntries
data.list$STATION[[1]]$OBSERVATIONS[[i]]<-unlist(data.list$STATION[[1]]$OBSERVATIONS[[i]])
i=2
nullEntries<-which(unlist(lapply(data.list$STATION[[1]]$OBSERVATIONS[[i]], function(x) is.null(x)))==T)
length(nullEntries)!=0
data.list$STATION[[1]]$OBSERVATIONS[[i]][nullEntries]
data.list$STATION[[1]]$OBSERVATIONS[[i]][nullEntries]<-NA
data.list$STATION[[1]]$OBSERVATIONS[[i]]<-unlist(data.list$STATION[[1]]$OBSERVATIONS[[i]])
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
#sort by ID:
#saveRDS(NEONsites,"C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-readRDS("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-NEONsites[with(NEONsites,order(Site.ID)),]
sites<-NEONsites$Site.ID
#startSite<-grep("YELL",sites)
#useSites<-sites[startSite:length(sites)]
#open directory to see what I've already run, and then run for sites that haven't been run yet:
temp<-list.files("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/")
#filter temp by variable:
temp<-temp[grep("wind",temp)]
#sites that have already run:
alreadyRun<-gsub("\\_.*","",temp)
runThese<-sites[which(sites %in% alreadyRun ==F)]
#useSites<-runThese[-c(1,2,3)]
i=1
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
mesoId=useTheseMeta$id
timeBgn<-gsub("-|:| ","",start_date)
timeEnd<-gsub("-|:| ","",end_date)
out<-get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId=mesoId,
timeBgn=timeBgn,timeEnd=timeEnd)
data.df <- data.frame(do.call(cbind,lapply(data.list$STATION[[1]]$OBSERVATIONS, as.data.frame)))
head(data.df)
names(data.df)<-names(data.list$STATION[[1]]$OBSERVATIONS)
head(data.df)
data.df$date_time<-as.POSIXct(data.df$date_time,format='%Y-%m-%dT%H:%M:%SZ',tz = "UTC")
head(data.df)
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
#sort by ID:
#saveRDS(NEONsites,"C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-readRDS("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-NEONsites[with(NEONsites,order(Site.ID)),]
sites<-NEONsites$Site.ID
#startSite<-grep("YELL",sites)
#useSites<-sites[startSite:length(sites)]
#open directory to see what I've already run, and then run for sites that haven't been run yet:
temp<-list.files("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/")
#filter temp by variable:
temp<-temp[grep("wind",temp)]
#sites that have already run:
alreadyRun<-gsub("\\_.*","",temp)
runThese<-sites[which(sites %in% alreadyRun ==F)]
#useSites<-runThese[-c(1,2,3)]
i=1
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
i=1
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
length(siteData.list)
numStations
j
length(nearbySites2)
numStations
length(siteData.list)
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/external-sites/metDownloadR/R/get_mesonet_data.R', echo=TRUE)
metDownloadR::get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn=timeBgn,timeEnd=timeEnd)
library(metDownloadR)
library(metDownloadR)
metDownloadR::get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn=timeBgn,timeEnd=timeEnd)
library(metDownloadR)
library(metDownloadR)
metDownloadR::getMesonetData
library(metDownloadR)
library(metDownloadR)
metDownloadR::get_mesonet_data(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn=timeBgn,timeEnd=timeEnd)
metDownloadR::getMesonetData(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn=timeBgn,timeEnd=timeEnd)
metDownloadR::getMesonetData(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn="timeBgn="20190201000000",timeEnd="20190205000000")
metDownloadR::getMesonetData(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn=20190201000000",timeEnd="20190205000000")
metDownloadR::getMesonetData(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn="20190201000000",timeEnd="20190205000000")
library(metDownloadR)
metDownloadR::getMesonetData(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn="20190201000000",timeEnd="20190205000000")
library(metDownloadR)
metDownloadR::getMesonetData(token="16088448e1b149509e45e401196106f0",mesoId="C6262",
timeBgn="20190201000000",timeEnd="20190205000000")
data.list
length9data.list
length(data.list)
length(data.list$STATION)
length(data.list$STATION)!=0
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
#saveRDS(NEONsites,"C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-readRDS("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-NEONsites[with(NEONsites,order(Site.ID)),]
sites<-NEONsites$Site.ID
#startSite<-grep("YELL",sites)
#useSites<-sites[startSite:length(sites)]
#open directory to see what I've already run, and then run for sites that haven't been run yet:
temp<-list.files("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/")
#filter temp by variable:
temp<-temp[grep("wind",temp)]
#sites that have already run:
alreadyRun<-gsub("\\_.*","",temp)
runThese<-sites[which(sites %in% alreadyRun ==F)]
#useSites<-runThese[-c(1,2,3)]
i=1
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
print(paste0("Data downloaded for ", mesoId))
print(paste0("Data downloaded for ", mesoID))
library(metDownloadR)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
names(siteData.list)<-unlist(keepNames)
keepNames
length(siteData.list)==0
ncols<-lapply(siteData.list, function(x) ncol(x))
colGroups<-names(table(unlist(ncols)))
climateData.list<-list()
colGroups
ncols
head(climateData.list[[1]])
head(siteData.list[[1]])
55.65+66.65
0.56*2
fuzzyTerms<-metScanR:::metScanR_terms$traceability
fuzzyTerms
termsACIS<-tibble::tibble(mainTerms=c("Temperature","Temperature","Temperature","Precipitation","Snow","Snow","Temperature"),
subTerms=c("Minimum Air Temperature","Maximum Air Temperature","Average Air Temperature",
"Precipitation","Snowfall","Snow Depth","Observed Air Temperature"),
subCodes=c("mint","maxt","avgt","pcpn","snow","snwd","obst"),
agency.network=rep("ACIS",7))
fuzzyTerms<-rbind(fuzzyTerms,termsACIS)
fuzzyTerms
keepCols<-fuzzyTerms[grep(tolower(vars), tolower(fuzzyTerms$subTerms)),]
keepCols
grepTerms<-c("Date","date","DATE",unique(unlist(c(keepCols[,c("subCodes","subTerms")]),use.names = F)))
grepTerms
ncols
colGroups
climateData.list<-list()
i=1
length(colGroups)
climateData.list[[i]]<-do.call(rbind,siteData.list[grep(paste0("\\b",colGroups[i],"\\b"),unlist(ncols))])
head(climateData.list[[i]])
i=2
head(siteData.list[[1]])
head(siteData.list[[2]])
i
i=1
climateData.list<-list()
i=1
climateData.list[[i]]<-do.call(rbind,siteData.list[grep(paste0("\\b",colGroups[i],"\\b"),unlist(ncols))])
head(climateData.list[[1]])
i=2
climateData.list[[i]]<-do.call(rbind,siteData.list[grep(paste0("\\b",colGroups[i],"\\b"),unlist(ncols))])
head(climateData.list[[2]])
i=3
climateData.list[[i]]<-do.call(rbind,siteData.list[grep(paste0("\\b",colGroups[i],"\\b"),unlist(ncols))])
head(climateData.list[[3]])
siteData.list[grep(paste0("\\b",colGroups[1],"\\b"),unlist(ncols))]
fuzzyTerms<-metScanR:::metScanR_terms$traceability
termsACIS<-tibble::tibble(mainTerms=c("Temperature","Temperature","Temperature","Precipitation","Snow","Snow","Temperature"),
subTerms=c("Minimum Air Temperature","Maximum Air Temperature","Average Air Temperature",
"Precipitation","Snowfall","Snow Depth","Observed Air Temperature"),
subCodes=c("mint","maxt","avgt","pcpn","snow","snwd","obst"),
agency.network=rep("ACIS",7))
fuzzyTerms<-rbind(fuzzyTerms,termsACIS)
tolower(vars)
keepCols<-fuzzyTerms[grep(tolower(vars), tolower(fuzzyTerms$subTerms)),]
keepCols
dataNames
dataNames<-lapply(climateData.list, function(x) trimws(gsub("\\.+"," ",names(x)),"both"))
dataNames
i=1
length(dataNames)
keepDataCols<-unique(unlist(lapply(grepTerms, function(x) grep(x,tolower(dataNames[[i]])))))
keepDataCols
keepDataCols
i
climateData.list2[[i]]<-climateData.list[[i]][,keepDataCols]
climateData.list2<-list()
climateData.list2[[i]]<-climateData.list[[i]][,keepDataCols]
climateData.list2[[i]]
date_col<-grep("date",tolower(names(climateData.list2[[i]])))
print(tolower(names(climateData.list2[[i]])))
print(date_col)
climateData.list2[[i]]$month<-as.character(substr(climateData.list2[[i]][,date_col],6,7))
climateData.list2[[i]]$season<-NA
climateData.list2[[i]]$season[which(climateData.list2[[i]]$month %in% c("03","04","05"))]<-"spring"
climateData.list2[[i]]$season[which(climateData.list2[[i]]$month %in% c("06","07","08"))]<-"summer"
climateData.list2[[i]]$season[which(climateData.list2[[i]]$month %in% c("09","10","11"))]<-"fall"
climateData.list2[[i]]$season[which(climateData.list2[[i]]$month %in% c("12","01","02"))]<-"winter"
grepKeep<-paste0(c(dataNames[[i]][keepDataCols],"season"),collapse="|")
keepCols<-grep(grepKeep, tolower(names(climateData.list2[[i]])))
keepCols
grepKeep
climateData.list2[[i]]<-climateData.list2[[i]][,keepCols]
climateData.list2[[i]]
minCol<-grep("min",tolower(names(climateData.list2[[i]])))
maxCol<-grep("max",tolower(names(climateData.list2[[i]])))
length(minCol)!=0 & length(maxCol)!=0
length(minCol)!=0
length(maxCol)!=0
climateData.list2[[i]][,keepCols]
keepCols
grepKeep<-paste0(c(dataNames[[i]][keepDataCols],"season"),collapse="|")
keepCols<-grep(grepKeep, tolower(names(climateData.list2[[i]])))
keepCols
climateData.list2[[i]]<-climateData.list2[[i]][,keepCols]
minCol<-grep("min",tolower(names(climateData.list2[[i]])))
maxCol<-grep("max",tolower(names(climateData.list2[[i]])))
length(minCol)!=0
climateData.list2[[i]]
print(tolower(names(climateData.list2[[i]])))
date_col
as.character(substr(climateData.list2[[i]][,date_col],6,7))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2019-02-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
length(siteData.list)
filename
vars
exists(vars)
vars
?exists
exists("vars")
nearbySites2
siteMetaLocations.list
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
#sort by ID:
#saveRDS(NEONsites,"C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-readRDS("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-NEONsites[with(NEONsites,order(Site.ID)),]
sites<-NEONsites$Site.ID
#startSite<-grep("YELL",sites)
#useSites<-sites[startSite:length(sites)]
#open directory to see what I've already run, and then run for sites that haven't been run yet:
temp<-list.files("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/")
#filter temp by variable:
temp<-temp[grep("all",temp)]
#sites that have already run:
alreadyRun<-gsub("\\_.*","",temp)
runThese<-sites[which(sites %in% alreadyRun ==F)]
i=1
siteCode<-paste0("NEON:",runThese[i])
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
startSysTime<-Sys.time()
options(stringsAsFactors = F)
strt=Sys.time()
sitename<-gsub(".*:","",siteID)
exists("vars")
varsFile="all"
filename<-paste0("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/",sitename,"_",varsFile,"_thresholds.rds")
filename
file.exists(filename) & overwriteData==F & recrunchThresholds==F
file.exists(filename) & overwriteData==F & recrunchThresholds==T
library(metDownloadR)
library(rjson)
siteNEON<-gsub(".*\\:","",siteID)
website<-paste0("http://data.neonscience.org/api/v0/locations/",siteNEON)
json_data <- rjson::fromJSON(file=website)
elevNEON<-json_data$data$locationElevation
latNEON<-json_data$data$locationDecimalLatitude
lonNEON<-json_data$data$locationDecimalLongitude
nearbySites2<-metScanR::siteFinder(lat=latNEON,lon=lonNEON,radius=radius,vars = vars,network = c("mesonet"))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
try(defineClimateRanges(siteID=siteCode,radius=50,startDate="2010-01-01 00:00:00",
endDate=as.character(Sys.time()),recrunchThresholds=T,overwriteData=T,numStations=3))
0.25/7.15
10000*0.035
metScanR::mapSiteFinder(metScanR::getNearby(siteID = "NEON:CPER",radius=30))
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
source('C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/defineClimateRanges.R', echo=TRUE)
#sort by ID:
#saveRDS(NEONsites,"C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-readRDS("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/neonSiteList.rds")
NEONsites<-NEONsites[with(NEONsites,order(Site.ID)),]
sites<-NEONsites$Site.ID
#startSite<-grep("YELL",sites)
#useSites<-sites[startSite:length(sites)]
#open directory to see what I've already run, and then run for sites that haven't been run yet:
temp<-list.files("C:/Users/jroberti/Git/NEON-FIU-document-IPT/dataQAQC/thresholds/")
#filter temp by variable:
temp<-temp[grep("all",temp)]
#sites that have already run:
alreadyRun<-gsub("\\_.*","",temp)
runThese<-sites[which(sites %in% alreadyRun ==F)]
#useSites<-runThese[-c(1,2,3)]
i=1
siteCode<-paste0("NEON:",runThese[i])
metScanR::getStation(siteID = "NEON:HARV")
metScanR::getStation(siteID = "NEON:HOPB")
11*2.5
27.5*4
